{"version":3,"sources":["Factories/ship.js","Factories/Player.js","Factories/Gameboard.js","ComputerBoard.js","ShipPlacer.js","PlayerBoard.js","GameInfo.js","Header.js","App.js","index.js"],"names":["shipFactory","length","shipLife","shipLength","hit","isSunk","playerFactory","name","playerName","board","boardArray","shipArray","i","push","ship","initBoard","prevAttack","idx","placeShip","horizontal","shipPlaced","positionArray","every","item","splice","currentShip","receiveAttack","shipsSunk","gameboardFactory","randIdxOrientation","randomIdx","Math","floor","random","randomOrientation","shipLengths","randomMove","randomIndex","randomPlacement","forEach","ComputerBoard","player2","setPlayer2","playRound","useEffect","playerCopy2","Object","assign","className","map","boardCell","index","onClick","e","data-index","data-hit","ShipPlacer","setHorizontal","player1","type","PlayerBoard","shipsPlaced","setPlayer1","playerPlacement","GameInfo","winner","gameOver","Header","App","useState","setIndex","setWinner","setGameOver","setShipsPlaced","playerCopy1","parseInt","target","dataset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.108be17a.chunk.js","sourcesContent":["export default function shipFactory(length) {\n  const shipLength = length;\n\n  let shipLife = length;\n\n  const hit = function () {\n    shipLife--;\n  };\n  const isSunk = function () {\n    return shipLife < 1 ? true : false;\n  };\n\n  return { shipLength, hit, isSunk };\n}\n","import gameboardFactory from './Gameboard';\n\nexport default function playerFactory(name) {\n  const playerName = name;\n\n  let board = gameboardFactory();\n\n  const randomMove = () => {\n    function randomIndex() {\n      let randomIdx = Math.floor(Math.random() * 100);\n      if (board.boardArray[randomIdx].hit === false) {\n        return randomIdx;\n      } else if (board.boardArray[randomIdx].hit === true) {\n        return randomIndex();\n      }\n    }\n\n    let idx = randomIndex();\n    board.receiveAttack(idx);\n  };\n\n  function randIdxOrientation(shipLength) {\n    const randomIdx = Math.floor(Math.random() * 100);\n    const orientations = [true, false];\n    const randomOrientation = Math.floor(Math.random() * 2);\n    if (\n      !board.placeShip(shipLength, randomIdx, orientations[randomOrientation])\n    ) {\n      return randIdxOrientation(shipLength);\n    }\n  }\n\n  const shipLengths = [5, 4, 3, 3, 2];\n\n  const randomPlacement = () => {\n    shipLengths.forEach((shipLength) => {\n      randIdxOrientation(shipLength);\n    });\n  };\n\n  return { playerName, board, randomMove, shipLengths, randomPlacement };\n}\n","import shipFactory from './ship';\n\nexport default function gameboardFactory() {\n  const boardArray = [];\n  const shipArray = [];\n  const initBoard = () => {\n    for (let i = 0; i < 100; i++) {\n      boardArray.push({\n        ship: false,\n        hit: false,\n      });\n    }\n  };\n\n  if (boardArray.length < 1) {\n    initBoard();\n  }\n\n  let prevAttack = {\n    hit: null,\n    idx: null,\n  };\n\n  const placeShip = function (length, idx, horizontal) {\n    let shipPlaced = false;\n    if (horizontal) {\n      //checking to see if full length of ship will fit on board\n      const shipPlacement = idx % 10;\n      if (length + shipPlacement <= 10) {\n        //checking to see if all positions on board are free for the ship\n        let positionArray = [];\n        for (let i = idx; i < length + idx; i++) {\n          positionArray.push(boardArray[i]);\n        }\n        if (positionArray.every((item) => item.ship === false)) {\n          shipPlaced = true;\n          let ship = shipFactory(length);\n          shipArray.push(ship);\n          for (let i = idx; i < length + idx; i++) {\n            boardArray.splice(i, 1, {\n              currentShip: ship,\n              ship: true,\n              hit: false,\n            });\n          }\n        }\n      }\n    }\n    if (!horizontal) {\n      if (idx + (length - 1) * 10 < 100) {\n        let positionArray = [];\n        for (let i = idx; i <= idx + (length - 1) * 10; i += 10) {\n          positionArray.push(boardArray[i]);\n        }\n        if (positionArray.every((item) => item.ship === false)) {\n          shipPlaced = true;\n          let ship = shipFactory(length);\n          shipArray.push(ship);\n          for (let i = idx; i <= idx + (length - 1) * 10; i += 10) {\n            boardArray.splice(i, 1, {\n              currentShip: ship,\n              ship: true,\n              hit: false,\n            });\n          }\n        }\n      }\n    }\n    return shipPlaced;\n  };\n\n  const receiveAttack = (idx) => {\n    if (boardArray[idx].ship === true && boardArray[idx].hit === false) {\n      boardArray[idx].currentShip.hit();\n      boardArray[idx].hit = true;\n      prevAttack.hit = true;\n      prevAttack.idx = idx;\n    } else if (\n      boardArray[idx].ship === false &&\n      boardArray[idx].hit === false\n    ) {\n      boardArray[idx].hit = true;\n      prevAttack.hit = false;\n      prevAttack.idx = null;\n    }\n  };\n\n  const shipsSunk = function () {\n    if (shipArray.length > 0) {\n      return shipArray.every((item) => item.isSunk() === true);\n    }\n  };\n\n  return {\n    boardArray,\n    shipArray,\n    placeShip,\n    receiveAttack,\n    shipsSunk,\n    prevAttack,\n  };\n}\n","import React, { useEffect, useState } from 'react';\n\nfunction ComputerBoard({ player2, setPlayer2, playRound }) {\n  useEffect(() => {\n    let playerCopy2 = Object.assign({}, player2);\n    playerCopy2.randomPlacement();\n    setPlayer2(playerCopy2);\n  }, []);\n\n  return (\n    <div className='board-wrapper'>\n      <div className='gameboard'>\n        {player2.board.boardArray.map((boardCell, index) => (\n          <div\n            onClick={(e) => playRound(e)}\n            data-index={index}\n            data-hit={boardCell.hit}\n            className={`cell ${boardCell.hit ? 'cell-hit' : null} ${\n              !boardCell.hit ? 'cell-water' : null\n            } \n\n            ${boardCell.hit && !boardCell.ship ? 'cell-water' : null} \n            \n            \n            ${boardCell.hit && boardCell.ship ? 'cell-ship' : null}   `}\n          >\n            {boardCell.ship ? 'ship' : 'water'}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ComputerBoard;\n","import React from 'react';\n\nfunction ShipPlacer({ setHorizontal, horizontal, index, player1 }) {\n  return (\n    <div className='ship-placer'>\n      <h3>\n        Orientation: {horizontal ? 'Horizontal' : 'Vertical'}{' '}\n        <button type='button' onClick={() => setHorizontal(!horizontal)}>\n          Toggle\n        </button>\n      </h3>\n      <div>\n        <h3> Ship Length: {player1.shipLengths[index]}</h3>\n      </div>\n    </div>\n  );\n}\n\nexport default ShipPlacer;\n","import React, { useState } from 'react';\nimport ShipPlacer from './ShipPlacer';\n\nfunction PlayerBoard({\n  player1,\n  setPlayer1,\n  shipsPlaced,\n  playerPlacement,\n  horizontal,\n  setHorizontal,\n  index,\n}) {\n  return (\n    <div className='player-board'>\n      {!shipsPlaced && (\n        <ShipPlacer\n          setHorizontal={setHorizontal}\n          horizontal={horizontal}\n          index={index}\n          player1={player1}\n        />\n      )}\n      <div className='board-wrapper'>\n        <div className='gameboard'>\n          {player1.board.boardArray.map((boardCell, index) => (\n            <div\n              onClick={(e) => playerPlacement(e)}\n              data-index={index}\n              className={`cell ${boardCell.hit ? 'cell-hit' : null} ${\n                boardCell.ship ? 'cell-ship' : 'cell-water'\n              }`}\n            ></div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PlayerBoard;\n","import React from 'react';\n\nfunction GameInfo({ winner, gameOver, shipsPlaced }) {\n  return (\n    <div>\n      <h2>Winner: {winner}</h2>\n      <h2>\n        {gameOver && !shipsPlaced\n          ? 'Place Your Ships!'\n          : null || (!gameOver && shipsPlaced)\n          ? 'Attack your opponent'\n          : null || (gameOver && shipsPlaced)\n          ? 'GAME OVER'\n          : null}\n      </h2>\n    </div>\n  );\n}\n\nexport default GameInfo;\n","import React from 'react';\n\nfunction Header() {\n  return (\n    <div>\n      <h1 className='header'>Battleship</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport playerFactory from './Factories/Player';\nimport ComputerBoard from './ComputerBoard';\nimport PlayerBoard from './PlayerBoard';\nimport GameInfo from './GameInfo';\nimport Header from './Header';\nimport ShipPlacer from './ShipPlacer';\n\nfunction App() {\n  const [player1, setPlayer1] = useState(playerFactory('Player 1'));\n\n  const [player2, setPlayer2] = useState(playerFactory('Computer'));\n\n  const [horizontal, setHorizontal] = useState(true);\n\n  const [index, setIndex] = useState(0);\n\n  const [winner, setWinner] = useState(null);\n\n  const [gameOver, setGameOver] = useState(true);\n\n  const [shipsPlaced, setShipsPlaced] = useState(false);\n\n  const playerPlacement = (e) => {\n    if (!shipsPlaced && gameOver) {\n      let playerCopy1 = Object.assign({}, player1);\n      if (\n        playerCopy1.board.placeShip(\n          playerCopy1.shipLengths[index],\n          parseInt(e.target.dataset.index),\n          horizontal\n        )\n      ) {\n        setPlayer1(playerCopy1);\n        setIndex(index + 1);\n      }\n    }\n  };\n\n  const resetGame = () => {\n    setPlayer1(playerFactory('Player 1'));\n    let playerCopy2 = playerFactory('Computer');\n    playerCopy2.randomPlacement();\n    setPlayer2(playerCopy2);\n    setShipsPlaced(false);\n    setGameOver(true);\n    setIndex(0);\n    setWinner(null);\n  };\n\n  const playRound = (e) => {\n    if (!gameOver && e.target.dataset.hit === 'false') {\n      let playerCopy2 = Object.assign({}, player2);\n      let index = e.target.dataset.index;\n      playerCopy2.board.receiveAttack(index);\n      let playerCopy1 = Object.assign({}, player1);\n      playerCopy1.randomMove();\n      setPlayer2(playerCopy2);\n      setPlayer1(playerCopy1);\n    }\n  };\n\n  useEffect(() => {\n    if (player1.board.shipsSunk()) {\n      setWinner(player2.playerName);\n      setGameOver(true);\n    } else if (player2.board.shipsSunk()) {\n      setWinner(player1.playerName);\n      setGameOver(true);\n    } else if (!player2.board.shipsSunk() && !player1.board.shipsSunk()) {\n      setWinner('No Winner yet!');\n    }\n  }, [player1, player2]);\n\n  useEffect(() => {\n    if (index > 4 && gameOver) {\n      setShipsPlaced(true);\n      setGameOver(false);\n    }\n  }, [index]);\n  useEffect;\n  return (\n    <div className='App'>\n      <Header />\n      <GameInfo winner={winner} gameOver={gameOver} shipsPlaced={shipsPlaced} />\n      <div className='gameboard-container'>\n        <div className='player-board'>\n          <PlayerBoard\n            player1={player1}\n            setPlayer1={setPlayer1}\n            playerPlacement={playerPlacement}\n            shipsPlaced={shipsPlaced}\n            horizontal={horizontal}\n            setHorizontal={setHorizontal}\n            index={index}\n          />\n        </div>\n        <ComputerBoard\n          className='gameboard-container'\n          player2={player2}\n          setPlayer2={setPlayer2}\n          playRound={playRound}\n        />\n      </div>\n      <button className='reset-button' onClick={resetGame}>\n        New Game\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}